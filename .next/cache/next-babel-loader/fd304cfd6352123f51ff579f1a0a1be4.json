{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Loading from \"../../components/Loading\";\nimport Error from \"../../components/Error\";\nimport RatesTable from \"../../components/RatesTable\";\nimport Select from \"../../components/form/Select\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\n\nconst getDateString = date => {\n  const y = date.getFullYear();\n  const m = date.getMonth() + 1;\n  const d = date.getDate();\n  return y + \"-\" + m + \"-\" + d;\n};\n\nconst Base = props => {\n  const {\n    0: compareBase,\n    1: setCompareBase\n  } = useState(\"EUR\");\n  const {\n    0: baseValue,\n    1: setBaseValue\n  } = useState(1);\n  const {\n    0: compareBaseValue,\n    1: setCompareBaseValue\n  } = useState(0);\n  const {\n    0: compareBaseRate,\n    1: setCompareBaseRate\n  } = useState(2);\n  const {\n    base,\n    date,\n    rates\n  } = props.data;\n  useEffect(() => {\n    setCompareBaseValue(rates[compareBase]);\n    setCompareBaseRate(rates[compareBase]);\n    setBaseValue(1);\n  }, [rates]);\n  const router = useRouter();\n\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n\n    switch (name) {\n      case \"baseValue\":\n        setBaseValue(value);\n        setCompareBaseValue(value * compareBaseRate);\n        break;\n\n      case \"compareBaseValue\":\n        setCompareBaseValue(value);\n        setBaseValue(value / compareBaseRate);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleCompareBaseChange = e => {\n    setCompareBase(e.target.value);\n    setCompareBaseRate(rates[e.target.value]);\n    setCompareBaseValue(baseValue * rates[e.target.value]);\n  };\n\n  const handleBaseChange = e => {\n    router.push(`/${date}/${e.target.value}`);\n  };\n\n  const handleDateChange = date => {\n    router.push(`/${getDateString(date)}/${base}`);\n  };\n\n  const CustomDatePickerInput = ({\n    value,\n    onClick\n  }) => __jsx(\"button\", {\n    className: \"btn btn-primary\",\n    onClick: onClick\n  }, __jsx(\"i\", {\n    className: \"fas fa-calendar\"\n  }), \" \", value, console.log(value));\n\n  return __jsx(Container, {\n    className: \"bg-dark text-light p-5\",\n    style: {\n      borderTopRightRadius: \"50px\",\n      borderBottomLeftRadius: \"50px\"\n    }\n  }, __jsx(Row, {\n    className: \"mb-5\"\n  }, __jsx(Col, null, __jsx(\"h1\", null, \"Showing results for \", base, __jsx(\"div\", {\n    className: \"float-right\"\n  }, __jsx(DatePicker, {\n    selected: new Date(date),\n    customInput: __jsx(CustomDatePickerInput, null),\n    className: \"form-control\",\n    onChange: date => handleDateChange(date)\n  }), __jsx(Select, {\n    handleChange: handleBaseChange,\n    base: base,\n    options: Object.keys(rates)\n  }))))), __jsx(Row, {\n    className: \"bg-light p-4\",\n    style: {\n      margin: \"0 0px\"\n    }\n  }, __jsx(Col, {\n    md: \"12\"\n  }, __jsx(Select, {\n    handleChange: handleCompareBaseChange,\n    base: compareBase,\n    options: Object.keys(rates),\n    compare: true\n  })), __jsx(Col, {\n    md: \"6\"\n  }, __jsx(FormGroup, null, __jsx(InputGroup, null, __jsx(InputGroup.Append, null, __jsx(InputGroup.Text, null, base)), __jsx(\"input\", {\n    type: \"text\",\n    value: baseValue,\n    onChange: handleChange,\n    name: \"baseValue\",\n    className: \"form-control\"\n  })))), __jsx(Col, {\n    md: \"6\"\n  }, __jsx(FormGroup, null, __jsx(InputGroup, null, __jsx(InputGroup.Append, null, __jsx(InputGroup.Text, null, compareBase)), __jsx(\"input\", {\n    type: \"text\",\n    value: compareBaseValue,\n    onChange: handleChange,\n    name: \"compareBaseValue\",\n    className: \"form-control\"\n  }))))), __jsx(Row, null, __jsx(Col, null, __jsx(RatesTable, {\n    rates: rates\n  }))));\n};\n\nexport async function getServerSideProps(context) {\n  const {\n    date,\n    base\n  } = context.params;\n  const result = await axios.get(`https://api.exchangeratesapi.io/${date}?base=${base}`);\n  const data = await result.data;\n  return {\n    props: {\n      data\n    }\n  };\n}\nexport default Base;","map":null,"metadata":{},"sourceType":"module"}
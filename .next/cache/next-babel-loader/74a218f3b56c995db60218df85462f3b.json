{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\cilur\\\\Documents\\\\webzo\\\\currency-exchange-contest\\\\src\\\\pages\\\\[date]\\\\[base].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from \"react\";\nimport { useRouter } from \"next/router\";\nimport axios from \"axios\";\nimport Loading from \"../../components/Loading\";\nimport Error from \"../../components/Error\";\nimport RatesTable from \"../../components/RatesTable\";\nimport Select from \"../../components/form/Select\";\nimport { Col, Row, Container } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\n\nconst Base = () => {\n  /*\r\n   * Fetching data from the url\r\n   */\n  const router = useRouter();\n  const {\n    date,\n    base\n  } = router.query;\n  /*\r\n  * Setting the initial state values\r\n  */\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState(null);\n  const {\n    0: baseState,\n    1: setBaseState\n  } = useState(\"\");\n  const {\n    0: dateState,\n    1: setDateState\n  } = useState(date === \"latest\" ? new Date() : new Date(date));\n  const {\n    0: rates,\n    1: setRates\n  } = useState([]);\n  console.log(router);\n  console.log(date === \"latest\" ? new Date() : new Date(date));\n  /*\r\n   * Fetching the data with our information\r\n   */\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        setIsLoading(true);\n        const result = await axios.get(\"https://api.exchangeratesapi.io/\" + dateToString(dateState) + \"?base=\" + baseState);\n        const {\n          data\n        } = result;\n        let receivedDateObject;\n\n        if (data.date === \"latest\") {\n          receivedDateObject = new Date();\n        } else {\n          receivedDateObject = new Date(data.date);\n        }\n\n        setBaseState(data.base);\n        setDateState(receivedDateObject);\n        setRates(data.rates);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        setError(\"Couldn't load data. Try again later or contact a developer if the issue persists.\");\n      }\n    }\n\n    fetchData();\n  }, [date, base]);\n\n  if (isLoading) {\n    return __jsx(Loading, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 16\n      }\n    });\n  }\n\n  if (error) {\n    return __jsx(Error, {\n      errorMsg: \"We've encountered an error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 16\n      }\n    });\n  }\n\n  const handleBaseChange = e => {\n    changeBaseAndReFetchData(e.target.value);\n  };\n\n  const changeBaseAndReFetchData = base => {\n    setBaseState(base);\n    const url = `/${dateState}/${base}`;\n    router.push(url);\n  };\n\n  const changeDateAndReFetchData = date => {\n    setDateState(date);\n    alert();\n  };\n\n  const dateToString = date => date.getFullYear() + \"-\" + date.getMonth() + 1 + \"-\" + date.getDate();\n\n  console.log(\"WILL TAKE\", dateState);\n  return __jsx(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, __jsx(Row, {\n    className: \"bg-light p-4\",\n    style: {\n      margin: \"0 0px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 17\n    }\n  }, __jsx(Select, {\n    handleChange: handleBaseChange,\n    base: baseState,\n    options: Object.keys(rates),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 21\n    }\n  })), __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }, __jsx(DatePicker, {\n    selected: new Date(),\n    onChange: date => changeDateAndReFetchData(date),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 21\n    }\n  }))), __jsx(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, __jsx(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 17\n    }\n  }, __jsx(RatesTable, {\n    rates: rates,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }))));\n};\n\nexport default Base;","map":{"version":3,"sources":["C:/Users/cilur/Documents/webzo/currency-exchange-contest/src/pages/[date]/[base].js"],"names":["React","useEffect","useState","useRouter","axios","Loading","Error","RatesTable","Select","Col","Row","Container","DatePicker","Base","router","date","base","query","isLoading","setIsLoading","error","setError","baseState","setBaseState","dateState","setDateState","Date","rates","setRates","console","log","fetchData","result","get","dateToString","data","receivedDateObject","handleBaseChange","e","changeBaseAndReFetchData","target","value","url","push","changeDateAndReFetchData","alert","getFullYear","getMonth","getDate","margin","Object","keys"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from \"react\"\r\nimport {useRouter} from \"next/router\";\r\nimport axios from \"axios\";\r\nimport Loading from \"../../components/Loading\";\r\nimport Error from \"../../components/Error\";\r\nimport RatesTable from \"../../components/RatesTable\";\r\nimport Select from \"../../components/form/Select\";\r\nimport {Col, Row, Container} from \"react-bootstrap\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nconst Base = () => {\r\n    /*\r\n     * Fetching data from the url\r\n     */\r\n    const router = useRouter();\r\n    const {date, base} = router.query;\r\n\r\n    /*\r\n    * Setting the initial state values\r\n    */\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n    const [baseState, setBaseState] = useState(\"\");\r\n    const [dateState, setDateState] = useState(date === \"latest\" ? new Date() : new Date(date) );\r\n    const [rates, setRates] = useState([]);\r\n\r\n    console.log(router)\r\n    console.log(date === \"latest\" ? new Date() : new Date(date))\r\n    /*\r\n     * Fetching the data with our information\r\n     */\r\n    useEffect( () => {\r\n        async function fetchData() {\r\n\r\n            try {\r\n                setIsLoading(true);\r\n                const result = await axios.get(\"https://api.exchangeratesapi.io/\" + dateToString(dateState) + \"?base=\" + baseState);\r\n                const {data} = result;\r\n\r\n                let receivedDateObject;\r\n                if(data.date === \"latest\") {\r\n                    receivedDateObject = new Date()\r\n                } else {\r\n                    receivedDateObject = new Date(data.date)\r\n                }\r\n\r\n\r\n                setBaseState(data.base);setDateState(receivedDateObject);setRates(data.rates);setIsLoading(false);\r\n            } catch (error) {\r\n                setIsLoading(false);\r\n                setError(\"Couldn't load data. Try again later or contact a developer if the issue persists.\");\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [date, base])\r\n\r\n    if(isLoading) {\r\n        return <Loading />;\r\n    }\r\n    if(error) {\r\n        return <Error errorMsg=\"We've encountered an error\" />;\r\n    }\r\n\r\n    const handleBaseChange = e => {\r\n        changeBaseAndReFetchData(e.target.value);\r\n    }\r\n    const changeBaseAndReFetchData = base => {\r\n        setBaseState(base);\r\n\r\n        const url = `/${dateState}/${base}`;\r\n        router.push(url)\r\n    }\r\n\r\n    const changeDateAndReFetchData = date => {\r\n        setDateState(date)\r\n        alert()\r\n    }\r\n    const dateToString = date => date.getFullYear() + \"-\" + date.getMonth() + 1 + \"-\" + date.getDate();\r\n\r\n    console.log(\"WILL TAKE\", dateState)\r\n    return (\r\n        <Container>\r\n            <Row className=\"bg-light p-4\" style={{ margin: \"0 0px\" }}>\r\n                <Col>\r\n                    <Select handleChange={handleBaseChange} base={baseState} options={Object.keys(rates)} />\r\n                </Col>\r\n                <Col>\r\n                    <DatePicker selected={new Date()} onChange={date => changeDateAndReFetchData(date)} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <RatesTable rates={rates} />\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    )\r\n}\r\nexport default Base;"]},"metadata":{},"sourceType":"module"}